/*------------------------------------------------------------------------------------
   Program:     port_select

   Description: Allows a serial port to be selected and connected to graphically.
                Has the following buttons:
                Up         - scrolls up through the serial port list 
                Down       - scrolls down through the serial port list
                Connect    - connects to the selected serial port
                Disconnect - disconnects from the serial port allowing a new serial
                             port to be connected to
                Refresh    - refreshes the list of serial ports. Useful if a new
                             serial device is connected to the PC after this app-
                             lication is started
                
   Purpose:     Allows the serial port to be selected within an application instead
                of hard-coding the port number
                
   Hardware:    Can be used to connect to Arduino or other serial devices
   
   Software:    Developed using Processing 2.2.1 (processing.org)
                Uses the Button class from:
                http://blog.startingelectronics.com/a-simple-button-for-processing-language-code/
                
   Date:        21 July 2015   Author:   W.A. Smith, http://startingelectronics.org
   
------------------------------------------------------------------------------------*/

import processing.serial.*;

Serial serial_port = null;        // the serial port
Button btn_s; 
// serial port buttons
Button btn_serial_up;              // move up through the serial port list
Button btn_serial_dn;              // move down through the serial port list
Button btn_serial_connect;         // connect to the selected serial port
Button btn_serial_disconnect;      // disconnect from the serial port
Button btn_serial_list_refresh;    // refresh the serial port list
String serial_list;                // list of serial ports
int serial_list_index = 0;         // currently selected serial port 
int num_serial_ports = 0;          // number of serial ports in the list
int NUM_OF_VALUES = 1024;
String myString = null;
String throwstring = null;
int[] DoTscreen = {//temporary screen shot
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
0xfe,0x03,0x00,0x00,0x00,0x00,0x00,0xc0,0x01,0x06,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x14,0xf8,0x79,0x00,0x10,0x00,0xe0,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x59,0x14,0x08,0x84,0x00,0x18,0x00,0x60,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xa9,0x14,0x08,0x84,0x00,0x14,0x00,0x30,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xa9,0x14,0x08,0x84,0x00,0x12,0x00,0x38,0x30,0x00,0x00,0x00,0x00,0x70,0x00,0x00,
0xa9,0x14,0x78,0x84,0x00,0x11,0x00,0x1c,0x10,0x00,0x00,0x00,0x00,0x88,0x00,0x00,
0xa9,0x14,0x08,0x84,0x00,0x11,0x00,0x0c,0x0c,0x00,0x00,0x00,0x00,0xa8,0x00,0x00,
0x89,0x14,0x08,0x84,0x00,0x3f,0x00,0x06,0x04,0x00,0x00,0x00,0x00,0xa8,0x00,0x00,
0x01,0x14,0x08,0x84,0x00,0x10,0x00,0x07,0x82,0x01,0x00,0x00,0x00,0x70,0x00,0x00,
0xfe,0xf3,0x0b,0x78,0x00,0x10,0x00,0x03,0x83,0x00,0x00,0x00,0x00,0x10,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x41,0x00,0x00,0x00,0x00,0x08,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x81,0x20,0xe0,0x00,0xf8,0x0f,0x08,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x40,0x10,0x10,0x01,0xff,0x7f,0x04,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x20,0x18,0x50,0xc1,0x07,0xf0,0x05,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x20,0x08,0x90,0xf1,0x00,0x80,0x07,0x00,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x20,0x04,0xe0,0x39,0x00,0x00,0x0e,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x06,0x00,0x1e,0x00,0x00,0x1c,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x02,0x00,0x0e,0x00,0x00,0x38,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x30,0x08,0x03,0x00,0x07,0x00,0x00,0x70,0x00,0x00,
0x03,0x00,0x00,0x00,0x00,0x00,0x30,0x08,0x01,0x80,0x03,0x00,0x00,0xe0,0x00,0x00,
0xff,0x00,0x00,0x00,0x00,0x00,0x18,0x04,0x01,0xc0,0x01,0x00,0x00,0xc0,0x01,0x00,
0xff,0x3f,0x00,0x00,0x00,0x00,0x18,0x84,0x00,0xc0,0x00,0x00,0x00,0x80,0x01,0x00,
0xff,0xff,0x07,0x00,0x00,0x00,0x18,0x84,0x00,0x60,0x00,0x00,0x00,0x00,0x03,0x00,
0xff,0xff,0x7f,0x00,0x00,0x00,0x18,0x86,0x00,0x60,0x00,0x00,0x00,0x00,0x03,0x00,
0xff,0xff,0xff,0x0f,0x00,0x00,0x18,0x42,0x00,0x30,0x00,0x00,0x00,0x00,0x06,0x00,
0xff,0xff,0xff,0xff,0x00,0x00,0x0c,0x42,0x00,0x30,0x00,0x00,0x00,0x00,0x06,0x00,
0xff,0xff,0xff,0xff,0x1f,0x00,0x0c,0x42,0x00,0x30,0x00,0x00,0x00,0x00,0x06,0x00,
0xff,0xff,0xff,0xff,0xff,0x01,0x0c,0x42,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x00,
0xff,0xff,0xff,0xff,0xff,0x1f,0x0c,0x42,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0x0d,0x42,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x42,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x42,0x00,0x18,0x00,0x80,0x00,0x00,0x0c,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x42,0x00,0x18,0x00,0x40,0x00,0x00,0x0c,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x42,0x00,0x18,0x00,0x40,0x00,0x00,0x0c,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x0c,0x42,0x00,0x18,0x00,0x20,0x00,0x00,0x0c,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x0c,0x42,0x00,0x18,0x00,0x28,0x00,0x00,0x0c,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x0c,0x42,0x00,0x30,0x00,0x1c,0x00,0x00,0x06,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x0c,0x42,0x00,0x30,0x00,0x08,0x00,0x00,0x06,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x86,0x00,0x30,0x00,0x00,0x00,0x00,0x06,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x84,0x00,0x60,0x00,0x04,0x00,0x00,0x03,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x84,0x00,0x60,0x00,0x02,0x00,0x00,0x03,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x04,0x01,0xc0,0x00,0x02,0x00,0x80,0x01,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x08,0x01,0xc0,0x01,0x01,0x00,0xc0,0x01,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x30,0x08,0x03,0x80,0x03,0x01,0x00,0xe0,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x02,0x00,0x87,0x00,0x00,0x70,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x30,0x10,0x06,0x00,0x8e,0x00,0x00,0x38,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x60,0x20,0x04,0x00,0x5c,0x00,0x00,0x1c,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x60,0x20,0x08,0x00,0x78,0x00,0x00,0x0e,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0xe0,0x20,0x18,0x00,0xf0,0x00,0x80,0x07,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0xc0,0x40,0x30,0x00,0xd4,0x07,0xf0,0x03,0x00,0x00,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x20,0x00,0x1c,0xff,0x7f,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x41,0x00,0x0e,0xf8,0x0f,0x04,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x83,0x00,0x0c,0x00,0x00,0x04,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x82,0xc1,0x04,0x00,0x00,0x08,0x00,0x00,
0x21,0xc6,0x27,0x04,0x00,0x00,0x00,0x07,0x04,0xe3,0x07,0x03,0x00,0x08,0x00,0x00,
0x21,0x49,0x68,0x06,0x00,0x00,0x00,0x06,0x0c,0xc4,0x83,0x04,0x00,0x10,0x00,0x00,
0xa1,0x50,0x68,0x06,0x00,0x00,0x00,0x0c,0x10,0x08,0x43,0x08,0x00,0x20,0x00,0x00,
0xa1,0x50,0xa8,0x05,0x00,0x00,0x00,0x1c,0x30,0x30,0x41,0x08,0x00,0x20,0x00,0x00,
0xbf,0xd0,0xa7,0x05,0x00,0x00,0x00,0x38,0x40,0xe0,0x40,0x08,0x00,0x40,0x00,0xe0,
0xa1,0x5f,0x21,0x04,0x00,0x00,0x00,0x30,0xc0,0x80,0x40,0x08,0x00,0x40,0x00,0xf0,
0xa1,0x50,0x22,0x04,0x00,0x00,0x00,0x60,0x00,0x43,0x40,0x08,0x00,0x80,0x00,0xf8,
0xa1,0x50,0x24,0x04,0x00,0x00,0x00,0xe0,0x00,0x06,0x80,0x04,0x00,0x00,0x00,0xf8,
0xa1,0x50,0x28,0x04,0x00,0x00,0x00,0xc0,0x01,0x08,0x00,0x03,0x00,0x00,0x00,0xf8};

byte[] byteBuffer = new byte[1024];

void setup() {
  // set the window size
  size (640, 480);
  for (int i = 0;i < 1024;i++){    
   byteBuffer[i] = byte(DoTscreen[i]);
  }
  
  // create the buttons
  btn_s = new Button("s", 340, 10, 40, 20);
  btn_serial_up = new Button("^", 140, 10, 40, 20);
  btn_serial_dn = new Button("v", 140, 50, 40, 20);
  btn_serial_connect = new Button("Connect", 190, 10, 100, 25);
  btn_serial_disconnect = new Button("Disconnect", 190, 45, 100, 25);
  btn_serial_list_refresh = new Button("Refresh", 190, 80, 100, 25);
  
  // get the list of serial ports on the computer
  serial_list = Serial.list()[serial_list_index];
  
  //println(Serial.list());
  //println(Serial.list().length);
  
  // get the number of serial ports in the list
  num_serial_ports = Serial.list().length;
    stroke(0);
}

void mousePressed() {
  if (btn_s.MouseIsOver()) {
    serial_port.clear();
    serial_port.write("s");
     serial_port.write(10);
    delay(2000);
    updateSerial();
  }
  // up button clicked
  if (btn_serial_up.MouseIsOver()) {
    if (serial_list_index > 0) {
      // move one position up in the list of serial ports
      serial_list_index--;
      serial_list = Serial.list()[serial_list_index];
    }
  }
  // down button clicked
  if (btn_serial_dn.MouseIsOver()) {
    if (serial_list_index < (num_serial_ports - 1)) {
      // move one position down in the list of serial ports
      serial_list_index++;
      serial_list = Serial.list()[serial_list_index];
    }
  }
  // Connect button clicked
  if (btn_serial_connect.MouseIsOver()) {
    if (serial_port == null) {
      // connect to the selected serial port
      serial_port = new Serial(this, Serial.list()[serial_list_index], 115200);
    }
  }
  // Disconnect button clicked
  if (btn_serial_disconnect.MouseIsOver()) {
    if (serial_port != null) {
      // disconnect from the serial port
      serial_port.stop();
      serial_port = null;
    }
  }
  // Refresh button clicked
  if (btn_serial_list_refresh.MouseIsOver()) {
    // get the serial port list and length of the list
    serial_list = Serial.list()[serial_list_index];
    num_serial_ports = Serial.list().length;
  }
}

void draw() {
  
 background(10);
     fill(255,200,40);  
   for (int by = 0; by < byteBuffer.length;by ++){//by counts though bytes
        for (int bi = 0; bi < 8;bi ++){//bi counts through 8 bits.
            if (((byteBuffer[by]>>bi) & 1)==1){//check if the bits are set (processing has no "bitRead")
              rect(64+((by%16)*32)+(bi*4),200+((by>>4)*4),3,3);//represent the existing DoT pixels as squares.
            }
        }
      }
fill(0, 408, 612, 204);
text(frameRate, 40, 120);  
  // draw the buttons in the application window
  btn_s.Draw();
  btn_serial_up.Draw();
  btn_serial_dn.Draw();
  btn_serial_connect.Draw();
  btn_serial_disconnect.Draw();
  btn_serial_list_refresh.Draw();
  // draw the text box containing the selected serial port
  DrawTextBox("Select Port", serial_list, 10, 10, 120, 60);
}

// function for drawing a text box with title and contents
void DrawTextBox(String title, String str, int x, int y, int w, int h)
{
  fill(255);
  rect(x, y, w, h);
  fill(0);
  textAlign(LEFT);
  textSize(14);
  text(title, x + 10, y + 10, w - 20, 20);
  textSize(12);  
  text(str, x + 10, y + 40, w - 20, h - 10);
}

// button class used for all buttons
class Button {
  String label;
  float x;    // top left corner x position
  float y;    // top left corner y position
  float w;    // width of button
  float h;    // height of button
  
  // constructor
  Button(String labelB, float xpos, float ypos, float widthB, float heightB) {
    label = labelB;
    x = xpos;
    y = ypos;
    w = widthB;
    h = heightB;
  }
  
  // draw the button in the window
  void Draw() {
    fill(218);
    stroke(141);
    rect(x, y, w, h, 4);
    textAlign(CENTER, CENTER);
    fill(0);
    text(label, x + (w / 2), y + (h / 2));
  }
  
  // returns true if the mouse cursor is over the button
  boolean MouseIsOver() {
    if (mouseX > x && mouseX < (x + w) && mouseY > y && mouseY < (y + h)) {
      return true;
    }
    return false;
  }
}
